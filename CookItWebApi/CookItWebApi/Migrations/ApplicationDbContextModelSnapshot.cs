// <auto-generated />
using System;
using CookItWebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CookItWebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CookItWebApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CookItWebApi.Models.ComentarioReceta", b =>
                {
                    b.Property<int>("_IdComentario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("_Comentario")
                        .IsRequired();

                    b.Property<string>("_Email");

                    b.Property<DateTime>("_Fecha");

                    b.Property<int>("_IdReceta");

                    b.Property<int>("_Puntaje");

                    b.HasKey("_IdComentario");

                    b.HasIndex("_Email");

                    b.HasIndex("_IdReceta");

                    b.ToTable("ComentarioRecetas");
                });

            modelBuilder.Entity("CookItWebApi.Models.Estacion", b =>
                {
                    b.Property<int>("_IdEstacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("_Nombre")
                        .IsRequired();

                    b.HasKey("_IdEstacion");

                    b.HasIndex("_Nombre")
                        .IsUnique();

                    b.ToTable("Estaciones");
                });

            modelBuilder.Entity("CookItWebApi.Models.EstadoReto", b =>
                {
                    b.Property<int>("_IdEstadoReto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("_Estado");

                    b.HasKey("_IdEstadoReto");

                    b.HasIndex("_Estado")
                        .IsUnique()
                        .HasFilter("[_Estado] IS NOT NULL");

                    b.ToTable("EstadosRetos");
                });

            modelBuilder.Entity("CookItWebApi.Models.HistorialReceta", b =>
                {
                    b.Property<string>("_Email");

                    b.Property<int>("_IdReceta");

                    b.Property<DateTime>("_FechaHora");

                    b.HasKey("_Email", "_IdReceta", "_FechaHora");

                    b.HasIndex("_IdReceta");

                    b.ToTable("HistorialRecetas");
                });

            modelBuilder.Entity("CookItWebApi.Models.Ingrediente", b =>
                {
                    b.Property<int>("_IdIngrediente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("_AptoCeliacos");

                    b.Property<bool>("_AptoDiabeticos");

                    b.Property<bool>("_AptoVeganos");

                    b.Property<bool>("_AptoVegetarianos");

                    b.Property<int>("_CantCaloriasPorMedida");

                    b.Property<int>("_Costo");

                    b.Property<int>("_IdEstacion");

                    b.Property<int>("_IdTipoIngrediente");

                    b.Property<int>("_Medida");

                    b.Property<int>("_MedidaPorGramo");

                    b.Property<int>("_MedidaPromedio");

                    b.Property<string>("_Nombre")
                        .IsRequired();

                    b.HasKey("_IdIngrediente");

                    b.HasIndex("_IdEstacion");

                    b.HasIndex("_IdTipoIngrediente");

                    b.HasIndex("_Nombre")
                        .IsUnique();

                    b.ToTable("Ingredientes");
                });

            modelBuilder.Entity("CookItWebApi.Models.IngredienteReceta", b =>
                {
                    b.Property<int>("_IdReceta");

                    b.Property<int>("_IdIngrediente");

                    b.Property<int>("_Cantidad");

                    b.HasKey("_IdReceta", "_IdIngrediente");

                    b.HasIndex("_IdIngrediente");

                    b.ToTable("IngredientesRecetas");
                });

            modelBuilder.Entity("CookItWebApi.Models.IngredienteUsuario", b =>
                {
                    b.Property<string>("_Email");

                    b.Property<int>("_IdIngrediente");

                    b.Property<int>("_Cantidad");

                    b.HasKey("_Email", "_IdIngrediente");

                    b.HasIndex("_IdIngrediente");

                    b.ToTable("IngredientesUsuarios");
                });

            modelBuilder.Entity("CookItWebApi.Models.MomentoDia", b =>
                {
                    b.Property<int>("_IdMomentoDia")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("_Nombre")
                        .IsRequired();

                    b.HasKey("_IdMomentoDia");

                    b.HasIndex("_Nombre")
                        .IsUnique();

                    b.ToTable("MomentosDias");
                });

            modelBuilder.Entity("CookItWebApi.Models.Notificacion", b =>
                {
                    b.Property<string>("_NotificacionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("_Descripción");

                    b.Property<string>("_Email");

                    b.Property<int>("_Estado");

                    b.Property<DateTime>("_FechaHora");

                    b.Property<string>("_Titulo");

                    b.HasKey("_NotificacionId");

                    b.HasIndex("_Email");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("CookItWebApi.Models.PasoReceta", b =>
                {
                    b.Property<int>("_IdPasoReceta")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("_IdReceta");

                    b.Property<string>("_Descripcion")
                        .IsRequired();

                    b.Property<byte[]>("_Foto");

                    b.Property<int>("_TiempoReloj");

                    b.Property<string>("_UrlVideo");

                    b.HasKey("_IdPasoReceta", "_IdReceta");

                    b.HasIndex("_IdReceta");

                    b.ToTable("PasoRecetas");
                });

            modelBuilder.Entity("CookItWebApi.Models.Perfil", b =>
                {
                    b.Property<string>("_Email");

                    b.Property<string>("_Apellido")
                        .IsRequired();

                    b.Property<bool>("_FiltroAutomatico");

                    b.Property<bool>("_FiltroCalorias");

                    b.Property<int>("_FiltroCaloriasMax");

                    b.Property<int>("_FiltroCaloriasMin");

                    b.Property<bool>("_FiltroCantPlatos");

                    b.Property<int>("_FiltroCantPlatosMax");

                    b.Property<int>("_FiltroCantPlatosMin");

                    b.Property<bool>("_FiltroCeliaco");

                    b.Property<bool>("_FiltroDiabetico");

                    b.Property<bool>("_FiltroDificultad");

                    b.Property<int>("_FiltroDificultadMax");

                    b.Property<int>("_FiltroDificultadMin");

                    b.Property<bool>("_FiltroEstacion");

                    b.Property<int?>("_FiltroEstacionId");

                    b.Property<bool>("_FiltroMomentoDia");

                    b.Property<int?>("_FiltroMomentoDiaId");

                    b.Property<bool>("_FiltroPaisOrigen");

                    b.Property<int?>("_FiltroPaisOrigenId");

                    b.Property<bool>("_FiltroPrecio");

                    b.Property<int>("_FiltroPrecioMax");

                    b.Property<int>("_FiltroPrecioMin");

                    b.Property<bool>("_FiltroPuntuacion");

                    b.Property<int>("_FiltroPuntuacionMax");

                    b.Property<int>("_FiltroPuntuacionMin");

                    b.Property<bool>("_FiltroTiempoPreparacion");

                    b.Property<int>("_FiltroTiempoPreparacionMax");

                    b.Property<int>("_FiltroTiempoPreparacionMin");

                    b.Property<bool>("_FiltroVegano");

                    b.Property<bool>("_FiltroVegetariano");

                    b.Property<byte[]>("_Foto");

                    b.Property<string>("_Nombre")
                        .IsRequired();

                    b.Property<string>("_NombreUsuario")
                        .IsRequired();

                    b.HasKey("_Email");

                    b.ToTable("Perfiles");
                });

            modelBuilder.Entity("CookItWebApi.Models.Receta", b =>
                {
                    b.Property<int>("_IdReceta")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("_AptoCeliacos");

                    b.Property<bool>("_AptoDiabeticos");

                    b.Property<bool>("_AptoVeganos");

                    b.Property<bool>("_AptoVegetarianos");

                    b.Property<int>("_CantCalorias");

                    b.Property<int>("_CantPlatos");

                    b.Property<float>("_Costo");

                    b.Property<string>("_Descripcion")
                        .IsRequired();

                    b.Property<int>("_Dificultad");

                    b.Property<string>("_Email")
                        .IsRequired();

                    b.Property<DateTime>("_FechaCreacion");

                    b.Property<byte[]>("_Foto");

                    b.Property<int>("_IdEstacion");

                    b.Property<int>("_IdMomentoDia");

                    b.Property<double>("_PuntajeTotal");

                    b.Property<int>("_TiempoPreparacion");

                    b.Property<string>("_Titulo")
                        .IsRequired();

                    b.HasKey("_IdReceta");

                    b.HasIndex("_Email");

                    b.HasIndex("_IdEstacion");

                    b.HasIndex("_IdMomentoDia");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("CookItWebApi.Models.RecetaFavorita", b =>
                {
                    b.Property<string>("_Email");

                    b.Property<int>("_IdReceta");

                    b.Property<DateTime>("_FechaHora");

                    b.HasKey("_Email", "_IdReceta");

                    b.HasIndex("_IdReceta")
                        .IsUnique();

                    b.ToTable("RecetasFavoritas");
                });

            modelBuilder.Entity("CookItWebApi.Models.Reto", b =>
                {
                    b.Property<string>("_EmailUsuOri");

                    b.Property<string>("_EmialUsuDes");

                    b.Property<int>("_RecetaId");

                    b.Property<bool>("_Cumplido");

                    b.Property<string>("_ComentarioDestino");

                    b.Property<string>("_ComentarioOrigen")
                        .IsRequired();

                    b.Property<DateTime>("_Fecha");

                    b.Property<int>("_IdEstadoReto");

                    b.Property<byte[]>("_Presentacion");

                    b.Property<int>("_Puntaje");

                    b.HasKey("_EmailUsuOri", "_EmialUsuDes", "_RecetaId", "_Cumplido");

                    b.HasIndex("_EmialUsuDes");

                    b.HasIndex("_IdEstadoReto");

                    b.HasIndex("_RecetaId");

                    b.ToTable("Retos");
                });

            modelBuilder.Entity("CookItWebApi.Models.TipoIngrediente", b =>
                {
                    b.Property<int>("_IdTipoIngrediente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("_Nombre")
                        .IsRequired();

                    b.HasKey("_IdTipoIngrediente");

                    b.HasIndex("_Nombre")
                        .IsUnique();

                    b.ToTable("TiposIngredientes");
                });

            modelBuilder.Entity("CookItWebApi.Models.Usuario", b =>
                {
                    b.Property<string>("_Email")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("_DeviceId");

                    b.Property<int>("_Tipo");

                    b.Property<DateTime>("_UltimoIngreso");

                    b.HasKey("_Email");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CookItWebApi.Models.ComentarioReceta", b =>
                {
                    b.HasOne("CookItWebApi.Models.Perfil", "_Perfil")
                        .WithMany()
                        .HasForeignKey("_Email")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CookItWebApi.Models.Receta", "_Receta")
                        .WithMany("_ListaComentariosReceta")
                        .HasForeignKey("_IdReceta")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.HistorialReceta", b =>
                {
                    b.HasOne("CookItWebApi.Models.Usuario", "_Usuario")
                        .WithMany()
                        .HasForeignKey("_Email")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CookItWebApi.Models.Receta", "_Receta")
                        .WithMany()
                        .HasForeignKey("_IdReceta")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.Ingrediente", b =>
                {
                    b.HasOne("CookItWebApi.Models.Estacion", "_Estacion")
                        .WithMany()
                        .HasForeignKey("_IdEstacion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CookItWebApi.Models.TipoIngrediente", "_TipoIngrediente")
                        .WithMany()
                        .HasForeignKey("_IdTipoIngrediente")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.IngredienteReceta", b =>
                {
                    b.HasOne("CookItWebApi.Models.Ingrediente", "_Ingrediente")
                        .WithMany()
                        .HasForeignKey("_IdIngrediente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CookItWebApi.Models.Receta", "_Receta")
                        .WithMany("_ListaIngredientesReceta")
                        .HasForeignKey("_IdReceta")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.IngredienteUsuario", b =>
                {
                    b.HasOne("CookItWebApi.Models.Perfil", "_Perfil")
                        .WithMany()
                        .HasForeignKey("_Email")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CookItWebApi.Models.Ingrediente", "_Ingrediente")
                        .WithMany()
                        .HasForeignKey("_IdIngrediente")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.Notificacion", b =>
                {
                    b.HasOne("CookItWebApi.Models.Perfil", "_Perfil")
                        .WithMany("_ListaNotificaciones")
                        .HasForeignKey("_Email")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.PasoReceta", b =>
                {
                    b.HasOne("CookItWebApi.Models.Receta", "_Receta")
                        .WithMany("_ListaPasosReceta")
                        .HasForeignKey("_IdReceta")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.Perfil", b =>
                {
                    b.HasOne("CookItWebApi.Models.Usuario", "_Usuario")
                        .WithMany()
                        .HasForeignKey("_Email")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.Receta", b =>
                {
                    b.HasOne("CookItWebApi.Models.Perfil", "_Perfil")
                        .WithMany()
                        .HasForeignKey("_Email")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CookItWebApi.Models.Estacion", "_Estacion")
                        .WithMany()
                        .HasForeignKey("_IdEstacion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CookItWebApi.Models.MomentoDia", "_MomentoDia")
                        .WithMany()
                        .HasForeignKey("_IdMomentoDia")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.RecetaFavorita", b =>
                {
                    b.HasOne("CookItWebApi.Models.Perfil", "_Perfil")
                        .WithMany()
                        .HasForeignKey("_Email")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CookItWebApi.Models.Receta", "_Receta")
                        .WithOne()
                        .HasForeignKey("CookItWebApi.Models.RecetaFavorita", "_IdReceta")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CookItWebApi.Models.Reto", b =>
                {
                    b.HasOne("CookItWebApi.Models.Perfil", "_PerfilUsuOri")
                        .WithMany("_ListaRetos")
                        .HasForeignKey("_EmailUsuOri")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CookItWebApi.Models.Perfil", "_PerfilUsuDes")
                        .WithMany()
                        .HasForeignKey("_EmialUsuDes")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CookItWebApi.Models.EstadoReto", "_EstadoReto")
                        .WithMany()
                        .HasForeignKey("_IdEstadoReto")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CookItWebApi.Models.Receta", "_Receta")
                        .WithMany()
                        .HasForeignKey("_RecetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CookItWebApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CookItWebApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CookItWebApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CookItWebApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
